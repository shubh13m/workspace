******** Installing python *********

Downloaded latest python version from its official website.
Run and install.
Open cmd. Enter command python --version.

******* Installing Django **********
enter, pip install virtualenvwrapper-win
after download completion.
Enter, pip install Django==<version>
afetr installation is complete
enter, python -m django --version
Check for the version you installed.



Goto folder you want your workplace.
then to enter project name 
enter, django-admin startproject <project-name>
go to file explorer check in you workspace project folder will be created with some default files.
Goto powershell again and enter  python manage.py runserver
this will start you server.
Goto chrome enter http://127.0.0.1:8000/ your server will be runing with default file

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------


Files inside project folder
----------------------------
    --- DONOT EDIT FIlES -------
 manage.py : run commands
 __init__.py : tells python that folder contains python files.
 wsgi.py :  provids hooks for webserver
 
 ---- EDIT FILES --------
 settings.py : configures djangourls.py routes requests based on URL.

To start an app goto your workspace in powershell and add the app name using 
python manage.py startapp <appname>

now open the setting.py file and add the appname in the installed apps list.



list of files generated in you apps folder :
----------------------------------
apps.py : setting specific to the app
models.py : provides the data layer django uses to construct schema and database queries.
admin.py : administrative interface to the app that will allow us to see and change data of the app.
urls.py : urls  routing specific to the app
view.py : defines logic and control flow
test.py : writing tests for functinalty of app.
migration / : holds files for migartion of database.


URL patterns : 
    when application recieves the url request the URL patterns decides which view to pass the url requests for handling. 

Views : are the python function calls that takes http request as input and returns another http request.

Models have the classes defined for database 

Templates have the html pages that gives pages for views.

when a request comes with url slash at end. It will look the url pattern it will redirect to the home function and first make database calls if needed and passes data to home.html

-----------------------------

Models : 
create data layer of an app.
Define database structure.
Allow us to query database.

Models is a class that inherits from django.db.models.Model

models.py contains models for app

Models can be seen as spreadsheet.
where column can be fields and rows are records.


Django fields.
---------------
use field classes from django models module.

Fieldtypes :
    IntegerField
    DecimalField
    CharField - requires an max_length attribute and stores an amount of character in it. 
    TextField - unbounded
    EmailField
    URLField
    BooleanField
    DateTimeField
    ForeignKey
    ManyToMany

Field Attribute
-------------
    max_length
    null
    blank
    default
    choices

Implement models and fields.
-----------------------------

open models.py and by default one line will be there.

from django.db import models
then define classes and fields 

Migrations generate scripts to change the database structure. When a model  is defined it doesnt exist in the database an initialmigration  is required.
Migration is needed when a model is added or some field is added, removed or some attribute of field is modified.

Migration commands:
--------------------
makemigrations
    genrates milgration files for later use
    uses current state of database to find what changes are needed in database to match models

migrate
    runs all migration that havenot been run yet
    run specific command for specific app


Make migration:

goto workspace in powershell and enter
python manage.py makemigrations

to have a look of what all migrations are present. enter
python manage.py showmigrations

to migrate all avalable migrations.enter
python manage.py migrate


You can verify the database content by using Sqlite browser.

Now the tables are created in the databse and we just need to populate the table.
so we will create a csv file in text editor and use that to fill tables

Create an admin superuser interface:
-------------------------------------

Open admin.py file in the app folder

from .model import <class>
@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    pass


then save and start the server and search for localhost/admin/ 
your user interface 

Now the list item are not correctly displayed.
To display that we will add list_display attribute in the class 
list_display = [<all fields>]
also the name of other classs is not correct. so we will overrite the fuctions in models and return the self.name of __str__





