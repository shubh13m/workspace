****************************************************************
		*Basics, 
		*vs C++, 
		*C++ vs Java, 
		*Input and Output, 
		*Operators, 
		Arrays and Strings, 
		Functions, 
		References and Pointers, 
		Dynamic memory allocation, 
		Object Oriented Programming(OOP),
		Constructor and Destructor, 
		Function Overloading, 
		Operator Overloading, 
		Virtual Functions, 
		Exception Handling, 
		Namespaces, 
		Standard Template Library (STL), 
		Inheritance, 
		C++ Library, 
		C++ Advanced, 
		C++ in Competitive Programming, 
		Puzzles, 
		Interview Questions, 
		Multiple Choice Questions

****************************************************************

Data Types: 
	Integer
	Character
	Boolean
	Floating Point
	Double Floating Point
	Valueless or Void
	Wide Character
	
Data type modifiers available in C++ are:
	Signed
	Unsigned
	Short
	Long
	
iostream: iostream stands for standard input output stream. This header file contains definitions to objects like cin, cout, cerr etc.

iomanip: iomanip stands for input output manipulators. The methods declared in this files are used for manipulating streams. This file contains definitions of setw, setprecision etc.

fstream: This header file mainly describes the file stream. This header file is used to handle the data being read from a file as input or data being written into the file as output.


#include<iostream>
using namespace std;
int main(void){
	int var = 100;
	cout<<var;
	return 0;
}

C vs C++:
require int return from main 
new keyword

1. Since C++ supports function overloading, additional information has to be added to function names (called name mangling) to avoid conflicts in binary code.
2. Function names may not be changed in C as C doesn’t support function overloading. To avoid linking problems, C++ supports extern “C” block. C++ compiler makes sure that names inside extern “C” block are not changed.

int *i = ptr;
int *j = malloc(sizeof(int) * 5);
int *i = (int *) ptr; 
int *j = (int *) malloc(sizeof(int) * 5); 

sizeof(‘V’) returns different values in C and C++. In C, a character literal is treated as int type where as in C++, a character literal is treated as char type 

Structures in C cannot have member functions inside structure but Structures in C++ can have member functions along with data member
We cannot directly initialize structure data members in C but we can do it in C++.
In C, we need to use struct to declare a struct variable. In C++, struct is not necessary. 
Structures in C cannot have constructor inside structure but Structures in C++ can have Constructor creation.

****************************************************************

IO redirection.

	istream :  perform input operations from the stream.
	ostream : for output operations
	iostream : both input and output operations.
	
	All these classes as well as filestream classes derive from ios adn streambuf. Buffer for any stream is from where we read instead of directly reading from source.

	buffer is a temporary storage. input is stored in buffer till os allots it to that program.
	
	to ignore the contents of the buffer in C and C++
	 use while((getchar())!='\n'); or cin>>ws; after the input.

	cout <<, cin >>, cerr<< for displaying error message.
	
	* Difference between endl and '\n' : endl is manipulator \n is character. endl is newline and flush while \n is only newline. Endl doesnot occupies the space while \n take a memory byte.
	
	* getline() reads until the newline is seen. to read a blank line use str.length() and skip 
	
****************************************************************

Operators :

	This and scope resolution.
		
			class Test{
				int a;
				static int a; // to use scope resolution operator wee need static variables
				public : 
					Test(){a=1;}
					void func(int a){cout<< this->a;}
					void func(int a){cout<< Test::a;}
			}
			int main(){
				Test obj;
				int k = 3;
				obj.func(k);
			}
			this will print 1 because of use of this. 
			
	New and delete operator:
		new operator initializes memory and returns address to pointer.
			int *ptr = new int;
			int *ptr = new int(25); // initailize 
			
		diff bewteen normal and using new created variables are former are deallocated once funbtion returns while later is dealocated by programmer.
		If space not available then exception is thrown.
		
		delete ptr; // deletes and releases memory. 
			
****************************************************************
################################################################

data of an object can be accessed only by the function associated with that object.
Function of one object can access function of other object.

math.h, iomanip.h, iostream.h, fstream.h, string.handle

structure of c++ program.
	include files	
	class declaration 
	member function definition
	main function
	
Reference variables.
	int &x = m;
	now x and m are same and seting  x= 0 will make m = 0;
	likewise 
	int func(&x){}
	func(m); is allowed.
	
scope resolution operator. 
	::x is used to takes global value.

typecast : float(x)

###############################################################
***************************************************************

Declaring array: 
	int arr[] = {10,29,1,2};
	int arr[2] ;
		string array : 2d array is used.
			char arr[4][10] = {"shubham","pandey"}; space is wasted
			using string, string arr[2] = {"subham","pandey"]

	Raw String in C++ :  in which \n and escape characters are not processed.
		string Str = R" my name is \n shubham." 

	Converting int to string.
		1. using to_string() function accepts number of any datatype and converts it to string.
		2. using sting stream. 
			ostringstream = str1; str1 << 10; string  str2 = str1.str();
			
	Tokenizing a string:
		splitting a string wrt to a delimiter.
			using strtok(string,delimiter); of string.h

	getline(string) in C++ :
		getline() is standard library function in C++ and is used to read a string from input stream. Present in <string> header.
		Default delimiter is \n. 

				string str;
				cout<<"name :";
				getline(cin,str);
				cout<<"name is :" <<str ;
				return 0;
				
				char str[10];
				cin.getline(str,10);
				cout<<str;
				

























































